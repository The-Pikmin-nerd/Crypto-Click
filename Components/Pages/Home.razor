@page "/"  

@rendermode InteractiveServer  


<PageTitle>Game</PageTitle>  

<h1>                                                                                                                                                                               </h1>  
<Component />  
@code {  
   int DPS = 0;  
   int currentCount = 0;  
   bool isDPSRunning = false;  

   public record Miner(string name, int price, double revenue);  
   public class UserMiner  
   {  
       public Miner miner { get; init; }  
       public int quantity { get; private set; }  

       public UserMiner(Miner miner, int quantity)  
       {  
           this.miner = miner;  
           this.quantity = quantity;  
       }  

       public void IncrementQuantity()  
       {  
           quantity++;  
       }  
   }  

    List<UserMiner> userMiners = new List<UserMiner>()
{
    new UserMiner(new Miner("Rizzen 3", 10, 1), 0),
    new UserMiner(new Miner("DogeMiner 1", 50, 3), 0),
    new UserMiner(new Miner("DogeMiner 2", 150, 7), 0),
    new UserMiner(new Miner("GPU Turbo 7", 1000, 25), 0),
    new UserMiner(new Miner("Mining Rig X", 5000, 50), 0),
    new UserMiner(new Miner("Doge Lazer", 20000, 150), 0),
    new UserMiner(new Miner("Quantum Doge Core", 80000, 500), 0),
    new UserMiner(new Miner("Blockchain Reactor", 250000, 1500), 0),
    new UserMiner(new Miner("Lunar Miner", 1000000, 5000), 0),
    new UserMiner(new Miner("Solar Doge Ray", 5000000, 15000), 0),
    new UserMiner(new Miner("Galaxy Rig", 20000000, 50000), 0),
    new UserMiner(new Miner("Time Distorter", 90000000, 200000), 0),
    new UserMiner(new Miner("Doge AI Miner", 350000000, 800000), 0),
    new UserMiner(new Miner("Multiverse Splitter", 999999999, 5000000), 0),
};

  private async Task IncrementCount()
{
    currentCount++;
    await Sauvegarder();
}


   async Task StartDPSLoop()  
   {  
       while (true)  
       {  
           currentCount += DPS;  
           StateHasChanged();  
           await Task.Delay(1000);  
       }  
   }  

    async void AcheterMiner(UserMiner userMiner)
    {
        var miner = userMiner.miner;
        int prix = (int)(miner.price * Math.Pow(1.15, userMiner.quantity));

        if (currentCount >= prix)
        {
            currentCount -= prix;
            userMiner.IncrementQuantity();

            DPS += (int)miner.revenue;

            if (!isDPSRunning)
            {
                isDPSRunning = true;
                _ = StartDPSLoop();
            }

            await Sauvegarder();
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ChargerSauvegarde();
        }
    }

    private async Task Sauvegarder()
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "doge_wallet", currentCount);
        await JS.InvokeVoidAsync("localStorage.setItem", "doge_dps", DPS);

        var quantités = userMiners.Select(um => um.quantity).ToList();
        var json = System.Text.Json.JsonSerializer.Serialize(quantités);
        await JS.InvokeVoidAsync("localStorage.setItem", "doge_miners", json);
    }
    private async Task ChargerSauvegarde()
       {
           var savedCount = await JS.InvokeAsync<string>("localStorage.getItem", "doge_wallet");
           var savedDps = await JS.InvokeAsync<string>("localStorage.getItem", "doge_dps");
           var savedQuantites = await JS.InvokeAsync<string>("localStorage.getItem", "doge_miners");

           if (int.TryParse(savedCount, out var count))
               currentCount = count;

           if (int.TryParse(savedDps, out var dps))
               DPS = dps;

           if (!string.IsNullOrEmpty(savedQuantites))
           {
               var quantités = System.Text.Json.JsonSerializer.Deserialize<List<int>>(savedQuantites);
               for (int i = 0; i < userMiners.Count && i < quantités.Count; i++)
               {
                   userMiners[i] = new UserMiner(userMiners[i].miner, quantités[i]);
               }
           }

           if (DPS > 0 && !isDPSRunning)
           {
               isDPSRunning = true;
               _ = StartDPSLoop();
           }

           StateHasChanged();
       }

}  
<style>
    .main-layout {
        display: flex;
        flex-direction: row;
        height: 100vh;
        overflow: hidden;
    }

    .left-panel {
        flex: 2;
        padding: 24px;
        background: #f0f0f0;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        gap: 24px;
    }

    .right-panel {
        flex: 1;
        background: #e6e6e6;
        overflow-y: auto;
        padding: 16px;
        border-left: 2px solid #ccc;
    }

    .card {
        margin-bottom: 16px;
    }
</style>
@foreach (var userMiner in userMiners)  
{
    <div class="main-layout">
        <div class="left-panel">
            <p role="status">Doge Wallet: @currentCount</p>
            <p role="status">Doge Par Clic: 1 </p>
            <p role="status">Production: @DPS Ð/s</p>

            <button class="button" @onclick="IncrementCount">
                <img src="https://raw.githubusercontent.com/The-Pikmin-nerd/Media/4a531a339684877ec9300223ba7ccc8977d412d5/pickaxe-svgrepo-com.svg"
                     alt="icon"
                     height="128"
                     width="128"
                     style="vertical-align: middle; margin-right: 64px;" />
            </button>
        </div>

        <div class="right-panel">
            @foreach (var userMiner_cool in userMiners)
            {
                <div class="card">
                    <div class="card-info">
                        <p class="text-title">@userMiner.miner.name</p>
                        <p class="text-body">@userMiner.miner.revenue Ð/s | Possédé : @userMiner.quantity</p>
                    </div>
                    <div class="card-footer">
                        <span class="text-title">@((int)(userMiner.miner.price * Math.Pow(1.15, userMiner.quantity))) Ð</span>
                        <div class="card-button" @onclick="@(() => AcheterMiner(userMiner))">
                            <svg class="svg-icon" viewBox="0 0 20 20">
                                <!-- icône ici -->
                            </svg>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>


}  

<style>
    .card {
        width: 190px;
        height: 180px;
        padding: .99em;
        background: #ddd;
        position: relative;
        overflow: visible;
        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
    }

    .card-info {
        padding-top: 10%;
    }

    svg {
        width: 20px;
        height: 20px;
    }

    .card-footer {
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-top: 10px;
        border-top: 1px solid #ddd;
    }

    /*Text*/
    .text-title {
        font-weight: 900;
        font-size: 1.2em;
        line-height: 1.5;
    }

    .text-body {
        font-size: .9em;
        padding-bottom: 10px;
    }

    /*Button*/
    .card-button {
        border: 1px solid #F57F17;
        display: flex;
        padding: .3em;
        cursor: pointer;
        border-radius: 50px;
        transition: .3s ease-in-out;
    }

        .card-button:hover {
            border: 1px solid #ffe133;
            background-color: #F57F17;
        }
</style>
<!-- From Uiverse.io by alexruix -->
